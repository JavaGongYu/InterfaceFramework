{"name": "test_getProvince[1-YJDL_01-获取一级地址-发送正确请求-/area/getProvince-POST-{\"Content-Type\":\"application/x-www-form-urlencoded\"}--请求发送成功返回正确结果-{\"success\":true,\"resultMessage\":\"token不能为空\",\"resultCode\":\"2008\"}-{\"success\": false, \"resultMessage\": \"token不能为空\", \"resultCode\": \"2007\"}--Yes]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False == True", "trace": "self = <test_case.Test_Case.Testaddapi object at 0x000002AD474A9A20>, id = '1'\ncaseid = 'YJDL_01', casename = '获取一级地址', casenote = '发送正确请求'\nurl = '/area/getProvince', method = 'POST'\nheaders = '{\"Content-Type\":\"application/x-www-form-urlencoded\"}', infodata = ''\ninfodatanote = '请求发送成功返回正确结果'\nresultdata = '{\"success\":true,\"resultMessage\":\"token不能为空\",\"resultCode\":\"2008\"}'\nactualdata = '{\"success\": false, \"resultMessage\": \"token不能为空\", \"resultCode\": \"2007\"}'\nactualresults = '', yn = 'Yes'\n\n    @allure.story('运行测试')\n    @pytest.mark.parametrize('id,caseid,casename,casenote,url,method,headers,infodata,infodatanote,resultdata,actualdata,actualresults,yn',get_excel_data()) # 参数化\n    def test_getProvince(self,id,caseid,casename,casenote,url,method,headers,infodata,infodatanote,resultdata,actualdata,actualresults,yn):\n        NewHeaders = json.loads(headers)  # 字符串转换字典\n        NewHeaders['token'] = f'{Token}'  # 新增Token到字典中\n        if infodata == '':\n            \"\"\"\n            判断参数是否为空，如果参数为空，则不转换\n            如不判断，参数为空报错\n            \"\"\"\n            Res = RunMain().run_main(url=f'{HOST}' + url, method=method, headers=NewHeaders) # 发送请求\n        else:\n            data = json.loads(infodata) # 参数字符串转换字典\n            Res = RunMain().run_main(url=f'{HOST}' + url, method=method, headers=NewHeaders,params=data) # 发送请求\n        CSetExcel().SetExcel(Res.json(), json.loads(id)) # 返回数据写入Excel\n        assert Res.status_code == 200 # 断言响应状态代码 考虑返回值是否为200 可写入Excel中读取\n        # 断言响应值\n        assert Res.json()['resultMessage'] == json.loads(resultdata)['resultMessage']\n>       assert Res.json()['success'] == json.loads(resultdata)['success']\nE       assert False == True\n\n..\\test_case\\Test_Case.py:44: AssertionError"}, "parameters": [{"name": "id", "value": "'1'"}, {"name": "caseid", "value": "'YJDL_01'"}, {"name": "casename", "value": "'获取一级地址'"}, {"name": "casenote", "value": "'发送正确请求'"}, {"name": "url", "value": "'/area/getProvince'"}, {"name": "method", "value": "'POST'"}, {"name": "headers", "value": "'{\"Content-Type\":\"application/x-www-form-urlencoded\"}'"}, {"name": "infodata", "value": "''"}, {"name": "infodatanote", "value": "'请求发送成功返回正确结果'"}, {"name": "resultdata", "value": "'{\"success\":true,\"resultMessage\":\"token不能为空\",\"resultCode\":\"2008\"}'"}, {"name": "actualdata", "value": "'{\"success\": false, \"resultMessage\": \"token不能为空\", \"resultCode\": \"2007\"}'"}, {"name": "actualresults", "value": "''"}, {"name": "yn", "value": "'Yes'"}], "start": 1615275530124, "stop": 1615275530260, "uuid": "524f601c-80b4-47ec-985a-839f52e88930", "historyId": "16b02687f5fe819e37781eb1f55aec2d", "testCaseId": "2feb974b24caeae3533c48d38f829b0a", "fullName": "test_case.Test_Case.Testaddapi#test_getProvince", "labels": [{"name": "feature", "value": "接口测试"}, {"name": "story", "value": "运行测试"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "Test_Case"}, {"name": "subSuite", "value": "Testaddapi"}, {"name": "host", "value": "MSIComputer"}, {"name": "thread", "value": "11964-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.Test_Case"}]}